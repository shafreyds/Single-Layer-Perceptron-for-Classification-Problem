import numpy as np

# Define the perceptron function
def perceptron(X, y, learning_rate=0.1, n_iterations=100):
    # Initialize the weights and bias
    weights = np.zeros(X.shape[1])
    bias = 0
    
    # Train the model
    for i in range(n_iterations):
        for j in range(X.shape[0]):
            # Compute the output of the perceptron
            output = np.dot(X[j], weights) + bias
            prediction = 1 if output >= 0 else 0
            
            # Update the weights and bias based on the prediction and the actual label
            error = y[j] - prediction
            weights += learning_rate * error * X[j]
            bias += learning_rate * error
    
    return weights, bias

# Create a random binary classification dataset
X = np.array([[1, 1], [-1, -1], [2, 2], [-2, -2]])
y = np.array([1, 0, 1, 0])

# Train the perceptron on the dataset
weights, bias = perceptron(X, y)

# Make predictions on a new set of data
new_data = np.array([[1, 1], [-1, -1]])
output = np.dot(new_data, weights) + bias
predictions = np.where(output >= 0, 1, 0)

print(predictions)
